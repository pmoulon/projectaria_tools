"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4985],{15680:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>d});var i=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},s.apply(this,arguments)}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,i,r=function(e,t){if(null==e)return{};var a,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)a=s[i],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)a=s[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=i.createContext({}),d=function(e){return function(t){var a=c(t.components);return i.createElement(e,s({},t,{components:a}))}},c=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,n=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),d=c(a),p=r,u=d["".concat(n,".").concat(p)]||d[p]||h[p]||s;return a?i.createElement(u,o(o({ref:t},l),{},{components:a})):i.createElement(u,o({ref:t},l))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,n=new Array(s);n[0]=v;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[u]="string"==typeof e?e:r,n[1]=o;for(var l=2;l<s;l++)n[l]=a[l];return i.createElement.apply(null,n)}return i.createElement.apply(null,a)}v.displayName="MDXCreateElement"},9692:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var i=a(58168),r=(a(96540),a(15680));const s={sidebar_position:30,title:"Timestamp Definitions"},n="Timestamps in Aria VRS Files",o={unversionedId:"data_formats/aria_vrs/timestamps_in_aria_vrs",id:"data_formats/aria_vrs/timestamps_in_aria_vrs",title:"Timestamp Definitions",description:"This page provides information about how Project Aria timestamp data is formatted in VRS.",source:"@site/docs/data_formats/aria_vrs/timestamps_in_aria_vrs.mdx",sourceDirName:"data_formats/aria_vrs",slug:"/data_formats/aria_vrs/timestamps_in_aria_vrs",permalink:"/projectaria_tools/docs/data_formats/aria_vrs/timestamps_in_aria_vrs",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_formats/aria_vrs/timestamps_in_aria_vrs.mdx",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Timestamp Definitions"},sidebar:"tutorialSidebar",previous:{title:"Format",permalink:"/projectaria_tools/docs/data_formats/aria_vrs/aria_vrs_format"},next:{title:"Basics",permalink:"/projectaria_tools/docs/data_formats/mps/mps_summary"}},m={},l=[{value:"VRS Timestamps (Single Device)",id:"vrs-timestamps-single-device",level:2},{value:"Device timestamps",id:"device-timestamps",level:3},{value:"Record and Host(Arrival) timestamps",id:"record-and-hostarrival-timestamps",level:3},{value:"Audio timestamp",id:"audio-timestamp",level:3},{value:"VRS Timestamps (Multiple Devices)",id:"vrs-timestamps-multiple-devices",level:2},{value:"TimeDomain.TIME_CODE",id:"timedomaintime_code",level:3},{value:"TimeDomain.TICSync",id:"timedomainticsync",level:3}],d={toc:l},c="wrapper";function p(e){let{components:t,...a}=e;return(0,r.mdx)(c,(0,i.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"timestamps-in-aria-vrs-files"},"Timestamps in Aria VRS Files"),(0,r.mdx)("p",null,"This page provides information about how Project Aria timestamp data is formatted in VRS."),(0,r.mdx)("p",null,"The sensors in Project Aria glasses are temporally aligned to a shared, device-time domain. Multiple devices (either multiple Aria glasses or Aria glasses plus other devices) can also be temporally aligned using a shared clock."),(0,r.mdx)("p",null,"Open datasets that contain temporally aligned data from multiple devices that use TimeDomain.TIME_CODE\u200b are:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/open_datasets/aria_everyday_activities_dataset/"},"Aria Everyday Activities (AEA)")," - recordings with 1-2 Aria glasses in a shared location"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/open_datasets/aria_digital_twin_dataset/"},"Aria Digital Twin (ADT)")," - recordings with 1-2 Aria glasses in a shared location")),(0,r.mdx)("p",null,"Aria research partners can use TICSync to make ",(0,r.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/ARK/sdk/ticsync"},"time synchronized recordings between multiple devices"),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Further resources:")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/tech_insights/device_timestamping"},"Project Aria Device Timestamping")," - how the hardware is configured"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/tech_insights/temporal_alignment_of_sensor_data"},"Temporal Alignment of Aria Sensor Data")," - how the data is temporally aligned and how to finely align IMU, barometer and magnetometer data"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/ARK/sdk/concepts/about_ticsync"},"About TICSync")," - how TICSync protocols work")),(0,r.mdx)("h2",{id:"vrs-timestamps-single-device"},"VRS Timestamps (Single Device)"),(0,r.mdx)("h3",{id:"device-timestamps"},"Device timestamps"),(0,r.mdx)("p",null,"We strongly recommend always working with device timestamp when working with single-device Aria data."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"TimeDomain.DEVICE_TIME",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Each piece of data captured by Project Aria glasses is associated with a device timestamp.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Also called capture timestamp in the VRS file format"))),(0,r.mdx)("li",{parentName:"ul"},"All sensors on the same pair of Aria glasses share the same device time domain issued from a single clock.")))),(0,r.mdx)("h3",{id:"record-and-hostarrival-timestamps"},"Record and Host(Arrival) timestamps"),(0,r.mdx)("p",null,"When working with Aria data you might encounter timestamps for different time events:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"TimeDomain.RECORD_TIME",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Record timestamps"),(0,r.mdx)("li",{parentName:"ul"},"Timestamps stored in the index of VRS files."),(0,r.mdx)("li",{parentName:"ul"},"For Project Aria glasses, these are equal to the device timestamp converted to a double-precision floating point representation."))),(0,r.mdx)("li",{parentName:"ul"},"TimeDomain.HOST_TIME",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Host or arrival timestamps"),(0,r.mdx)("li",{parentName:"ul"},"Timestamps when the sensor data is saved to the device",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Note: this timestamp does not represent the timestamp when the sensor data is captured. Please use TimeDomain.DEVICE_TIME to access the capture timestamp"))),(0,r.mdx)("li",{parentName:"ul"},"Should not be needed for any purpose")))),(0,r.mdx)("h3",{id:"audio-timestamp"},"Audio timestamp"),(0,r.mdx)("p",null,"For audio data, each record contains 2048 samples that ranges 42ms (or 4096 samples that ranges 84ms). Given a record (a chunk) of audio data,\nthe record timestamp is the first timestamp in the record and the device timestamp is the last timestamp in the record.\nTherefore, device timestamp - record timestamp for the same record is 42ms for 2048 samples (and 84ms for 4096 samples)."),(0,r.mdx)("h2",{id:"vrs-timestamps-multiple-devices"},"VRS Timestamps (Multiple Devices)"),(0,r.mdx)("p",null,"Accurate time synchronization is essential when co-ordinating data collection or analyzing data between multiple devices (real world or synthetic). Without synchronization, any device\u2019s built-in recording of time will naturally drift and go out of sync (like how your microwave slowly loses time over a year)."),(0,r.mdx)("h3",{id:"timedomaintime_code"},"TimeDomain.TIME_CODE"),(0,r.mdx)("p",null,"Multiple devices (either multiple Aria glasses or Aria glasses plus other devices) that are temporally aligned using an external shared clock will include the TimeDomain.TIME_CODE datastream in the VRS file."),(0,r.mdx)("p",null,"We use time sync servers to record pairs of timestamps between the server\u2019s local timestamp and the Aria glasses\u2019 device timestamp. This generates a mapping between the Aria\u2019s device time and the server\u2019s local time. The server\u2019s local time serves as a unified time domain shared by the multiple devices."),(0,r.mdx)("p",null,"Timecode time refers to the same \u201ccapture\u201d event as device time, but differs by the clock assigning the timestamps. Thus we can convert between timecode time and device time by looking up values in the time mapping table."),(0,r.mdx)("h3",{id:"timedomainticsync"},"TimeDomain.TICSync"),(0,r.mdx)("p",null,"TICSync is an extremely efficient algorithm for learning the mapping between distributed clocks, which typically achieves better than millisecond accuracy within just a few seconds. It works by estimating clock offset and skew between itself (the host/client) and a device (Aria leader or server)."),(0,r.mdx)("p",null,"In a TICSync recording, all devices mark video frames with a timestamp in a conceptual TICSync time domain. During the recording, the TICSync algorithm constructs, on-the-fly, the mapping between the conceptual TICSync time domain and the concrete DEVICE_TIME time domains of the glasses. Under the current implementation, the unique server device uses its DEVICE_TIME as the conceptual TICSync time, while all clients use their concrete TIC_SYNC time domains."))}p.isMDXComponent=!0}}]);