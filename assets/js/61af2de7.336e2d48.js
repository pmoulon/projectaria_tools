"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7619],{15680:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>v,useMDXComponents:()=>p,withMDXComponents:()=>u});var o=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},n.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=o.createContext({}),u=function(e){return function(t){var r=p(t.components);return o.createElement(e,n({},t,{components:r}))}},p=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,m=u["".concat(i,".").concat(d)]||u[d]||f[d]||n;return r?o.createElement(m,s(s({ref:t},c),{},{components:r})):o.createElement(m,s({ref:t},c))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<n;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},8180:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>s,toc:()=>c});var o=r(58168),a=(r(96540),r(15680));const n={sidebar_position:35,title:"Collaborative Tools"},i="Collaborative Tools",s={unversionedId:"collaborative_tools",id:"collaborative_tools",title:"Collaborative Tools",description:"Overview",source:"@site/docs/collaborative_tools.mdx",sourceDirName:".",slug:"/collaborative_tools",permalink:"/projectaria_tools/docs/collaborative_tools",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/collaborative_tools.mdx",tags:[],version:"current",sidebarPosition:35,frontMatter:{sidebar_position:35,title:"Collaborative Tools"},sidebar:"tutorialSidebar",previous:{title:"Export VRS to MP4 (Python)",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/vrs_to_mp4"},next:{title:"About the Aria Research Kit",permalink:"/projectaria_tools/docs/ARK/about_ARK"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Used in Project Aria Tools",id:"used-in-project-aria-tools",level:2},{value:"VRS",id:"vrs",level:3},{value:"Rerun",id:"rerun",level:3},{value:"Open source tools that use Project Aria",id:"open-source-tools-that-use-project-aria",level:2},{value:"Nerfstudio",id:"nerfstudio",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.mdx)(p,(0,o.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"collaborative-tools"},"Collaborative Tools"),(0,a.mdx)("h2",{id:"overview"},"Overview"),(0,a.mdx)("p",null,"This page provides an overview of open source tooling can be useful when working with Project Aria data."),(0,a.mdx)("h2",{id:"used-in-project-aria-tools"},"Used in Project Aria Tools"),(0,a.mdx)("p",null,"Some of the open source tools we use are:"),(0,a.mdx)("h3",{id:"vrs"},"VRS"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/vrs"},"VRS")," is the open source file format used by ",(0,a.mdx)("a",{parentName:"p",href:"https://projectaria.com"},"Project Aria"),". It is optimized to record & playback streams of sensor data, such as images, audio samples, and any other discrete sensors (IMU, temperature, etc), stored in per-device streams of time-stamped records."),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/data_formats/aria_vrs/"},"How Project Aria uses VRS")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/vrs"},"VRS Readme")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/vrs/tree/main/vrs"},"VRS Core functionality"))),(0,a.mdx)("h3",{id:"rerun"},"Rerun"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://www.rerun.io/"},"Rerun")," is an open source SDK and engine for visualizing and interacting with multi modal data streams. It can be used from Python, Rust and C++ and provides a log API and a visualizer. Project Aria Tools uses it to create Python visualization tools."),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/data_utilities/visualization/visualization_python"},"Python Visualization using Project Aria Tools")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://facebookresearch.github.io/projectaria_tools/docs/data_utilities/visualization/visualization_python#an-introduction-to-rerun"},"An introduction to Rerun")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/rerun-io/rerun/"},"Rerun Readme"))),(0,a.mdx)("h2",{id:"open-source-tools-that-use-project-aria"},"Open source tools that use Project Aria"),(0,a.mdx)("h3",{id:"nerfstudio"},"Nerfstudio"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://docs.nerf.studio/"},"Nerfstudio")," provides an API that allows for a simplified end-to-end process for creating, training, and testing NeRFs. The library supports a more interpretable implementation of NeRFs by modularizing each component."),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://docs.nerf.studio/quickstart/custom_dataset.html#aria"},"Nerfstudio with Project Aria data")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/nerfstudio-project/nerfstudio/"},"Nerfstudio Readme")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://docs.nerf.studio/nerfology/methods/splat.html"},"Gaussian Splatting")," with Nerfstudio")))}d.isMDXComponent=!0}}]);