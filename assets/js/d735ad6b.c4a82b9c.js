"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4651],{15680:(e,n,r)=>{r.r(n),r.d(n,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>l});var i=r(96540);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e},a.apply(this,arguments)}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function d(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,i,t=function(e,n){if(null==e)return{};var r,i,t={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var c=i.createContext({}),l=function(e){return function(n){var r=p(n.components);return i.createElement(e,a({},n,{components:r}))}},p=function(e){var n=i.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):d(d({},n),e)),r},m=function(e){var n=p(e.components);return i.createElement(c.Provider,{value:n},e.children)},v="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=p(r),m=t,v=l["".concat(o,".").concat(m)]||l[m]||h[m]||a;return r?i.createElement(v,d(d({ref:n},c),{},{components:r})):i.createElement(v,d({ref:n},c))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,o=new Array(a);o[0]=u;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[v]="string"==typeof e?e:t,o[1]=d;for(var c=2;c<a;c++)o[c]=r[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},36513:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var i=r(58168),t=(r(96540),r(15680));const a={sidebar_position:60,title:"TICSync Time Synchronization"},o="TICSync Code Snippet",d={unversionedId:"ARK/sdk/samples/ticsync_sample",id:"ARK/sdk/samples/ticsync_sample",title:"TICSync Time Synchronization",description:"Overview",source:"@site/docs/ARK/sdk/samples/ticsync_sample.mdx",sourceDirName:"ARK/sdk/samples",slug:"/ARK/sdk/samples/ticsync_sample",permalink:"/projectaria_tools/docs/ARK/sdk/samples/ticsync_sample",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/ARK/sdk/samples/ticsync_sample.mdx",tags:[],version:"current",sidebarPosition:60,frontMatter:{sidebar_position:60,title:"TICSync Time Synchronization"},sidebar:"tutorialSidebar",previous:{title:"Streaming Undistorted RGB Image Using Calibration",permalink:"/projectaria_tools/docs/ARK/sdk/samples/undistort_rgb_image"},next:{title:"Streaming Internals",permalink:"/projectaria_tools/docs/ARK/sdk/concepts/streaming_internals"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Running the sample",id:"running-the-sample",level:2},{value:"Example 1: Create TICSync time synchronized recordings, download them and visualize the data",id:"example-1-create-ticsync-time-synchronized-recordings-download-them-and-visualize-the-data",level:3},{value:"Example 2: Create TICSync time synchronized recordings with granular control over details.",id:"example-2-create-ticsync-time-synchronized-recordings-with-granular-control-over-details",level:3},{value:"Make the recording",id:"make-the-recording",level:4},{value:"Example 3: Examine and download recordings",id:"example-3-examine-and-download-recordings",level:3},{value:"Download the recordings",id:"download-the-recordings",level:4},{value:"<code>ticsync_recording.py</code> code walkthrough",id:"ticsync_recordingpy-code-walkthrough",level:2},{value:"1. Retrieve serial number and profile names for server and client devices",id:"1-retrieve-serial-number-and-profile-names-for-server-and-client-devices",level:3},{value:"2. Set up the server device",id:"2-set-up-the-server-device",level:3},{value:"3. Set up hotspot on the server device",id:"3-set-up-hotspot-on-the-server-device",level:3},{value:"4. Set up the DDS RPC on the server device",id:"4-set-up-the-dds-rpc-on-the-server-device",level:3},{value:"5. Retrieve the recording manager of the server device",id:"5-retrieve-the-recording-manager-of-the-server-device",level:3},{value:"6. Set up the client devices",id:"6-set-up-the-client-devices",level:3},{value:"7. Connect client devices to the server device hotspot**",id:"7-connect-client-devices-to-the-server-device-hotspot",level:3},{value:"8. Start recording on the server device*",id:"8-start-recording-on-the-server-device",level:3},{value:"9. Start recording on the client devices",id:"9-start-recording-on-the-client-devices",level:3},{value:"10. Wait for devices to be ready for data collection",id:"10-wait-for-devices-to-be-ready-for-data-collection",level:3}],l={toc:c},p="wrapper";function m(e){let{components:n,...r}=e;return(0,t.mdx)(p,(0,i.A)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)("h1",{id:"ticsync-code-snippet"},"TICSync Code Snippet"),(0,t.mdx)("h2",{id:"overview"},"Overview"),(0,t.mdx)("p",null,"These code samples show how to use the Client SDK to create time synchronized recordings between multiple Project Aria glasses using ",(0,t.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/ARK/sdk/concepts/about_ticsync"},"TICSync"),"."),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"ticsync_recording.py")," - create TICSync time synchronized recordings with the option to set:",(0,t.mdx)("ul",{parentName:"li"},(0,t.mdx)("li",{parentName:"ul"},"Which device is server, which are clients"),(0,t.mdx)("li",{parentName:"ul"},"What recording profile each device uses"))),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"ticsync_cleanup.py")," - Stop recording (if necessary) and return glasses to their normal recording state"),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"ticsync_file_manager.py")," - list and download recordings made with shared session ids")),(0,t.mdx)("p",null,"This page goes through examples using each of the scripts, followed by a ",(0,t.mdx)("inlineCode",{parentName:"p"},"ticsync_recording.py")," code walkthrough."),(0,t.mdx)("h2",{id:"running-the-sample"},"Running the sample"),(0,t.mdx)("h3",{id:"example-1-create-ticsync-time-synchronized-recordings-download-them-and-visualize-the-data"},"Example 1: Create TICSync time synchronized recordings, download them and visualize the data"),(0,t.mdx)("p",null,"For an end to end guide from how to create TICSync recordings to how to consume the data, go to ",(0,t.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/ARK/sdk/ticsync"},"Time Synchronized Recordings with Multiple Aria Glasses"),". This guide uses ",(0,t.mdx)("inlineCode",{parentName:"p"},"ticsync_recording.py")," in its simplest form, where the user does not need to set the server/client details or individual recording profiles."),(0,t.mdx)("h3",{id:"example-2-create-ticsync-time-synchronized-recordings-with-granular-control-over-details"},"Example 2: Create TICSync time synchronized recordings with granular control over details."),(0,t.mdx)("p",null,"For TICSync to work, all devices need to be on the one Wi-Fi network and a leader device needs to create a synchronized time reference. By default, ",(0,t.mdx)("inlineCode",{parentName:"p"},"ticsync.py")," will select one device to be the Server device (Wi-Fi hotspot and leader device) and all the other devices will be client devices. You can, however, manually configure which device is the server or alter the script to use different Wi-Fi hotspots or leader devices."),(0,t.mdx)("h4",{id:"make-the-recording"},"Make the recording"),(0,t.mdx)("ol",null,(0,t.mdx)("li",{parentName:"ol"},"Plug all glasses into your computer"),(0,t.mdx)("li",{parentName:"ol"},"Go to the TICSync sample code directory")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"cd ~/projectaria_client_sdk_samples/ticsync\n")),(0,t.mdx)("ol",{start:3},(0,t.mdx)("li",{parentName:"ol"},"Get the serial number for all connected devices by running ",(0,t.mdx)("inlineCode",{parentName:"li"},"aria device --list")),(0,t.mdx)("li",{parentName:"ol"},"Use the Client SDK to run ",(0,t.mdx)("inlineCode",{parentName:"li"},"ticsync.py")," to:",(0,t.mdx)("ol",{parentName:"li"},(0,t.mdx)("li",{parentName:"ol"},"Set one pair of glasses to be the server (Wi-Fi hotspot and using Fast DDS to be the leader device)"),(0,t.mdx)("li",{parentName:"ol"},"Set the other glasses to be client devices connecting to the server"),(0,t.mdx)("li",{parentName:"ol"},"Set what recording profiles will be used"),(0,t.mdx)("li",{parentName:"ol"},"Start recording with TICSync protocols")))),(0,t.mdx)("p",null,"In this example, three devices will be making a time synchronized recording and each uses a different recording profile."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"python -m ticsync_recording --server <server_serial> profile4 --client <client1_serial> profile16 --client <client2_serial> profile24\n")),(0,t.mdx)("admonition",{title:"Some recording profiles won't work",type:"note"},(0,t.mdx)("p",{parentName:"admonition"},"Recording profiles 0, 2, 10, 19, 25 and 27 have wifiScanModeActive enabled, so they can't be used to create TICSync recordings.")),(0,t.mdx)("ol",{start:5},(0,t.mdx)("li",{parentName:"ol"},"In the command line you\u2019ll see:",(0,t.mdx)("ol",{parentName:"li"},(0,t.mdx)("li",{parentName:"ol"},"Server device has started a Wi-Fi hotspot and Client devices have joined the hotspot"),(0,t.mdx)("li",{parentName:"ol"},"All devices have started recording",(0,t.mdx)("ul",{parentName:"li"},(0,t.mdx)("li",{parentName:"ul"},"You should also have visual confirmation from the recording LED on each of the glasses"))),(0,t.mdx)("li",{parentName:"ol"},"Script prompting that it is waiting for devices to be ready for time synchronized data collection."),(0,t.mdx)("li",{parentName:"ol"},"Script prompting that devices are ready for time synchronized data collection."))),(0,t.mdx)("li",{parentName:"ol"},"Unplug the glasses (if you wish) and record your activity",(0,t.mdx)("ul",{parentName:"li"},(0,t.mdx)("li",{parentName:"ul"},"It may take ~40 seconds for the ticsync algorithm to reach stabilization between all devices. ",(0,t.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/ARK/sdk/ticsync#tutorial"},"The TICSync Jupyter notebook tutorial")," includes how to assess how long it takes for your specific setup and recording profile."))),(0,t.mdx)("li",{parentName:"ol"},"Stop recording:",(0,t.mdx)("ul",{parentName:"li"},(0,t.mdx)("li",{parentName:"ul"},"Press the Capture button on the top right of the Aria glasses and then return glasses to their normal state by plugging them in and using \u2018ticsync_cleanup\u2019"),(0,t.mdx)("li",{parentName:"ul"},"Plug the glasses back into your computer and use ",(0,t.mdx)("inlineCode",{parentName:"li"},"ticsync_cleanup"))))),(0,t.mdx)("p",null,"Run cleanup based on number of devices plugged in:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"python -m ticsync_cleanup --total_num_devices 3\n")),(0,t.mdx)("p",null,"Run clean up by specifying devices:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"python -m ticsync_cleanup --server <server_serial> --clients <client_serial1> <client_serial2>\n")),(0,t.mdx)("p",null,"Example output:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"-------- Plug in all devices to your computer again for TicSync cleanup --------\n-------- Then press Enter to start TicSync cleanup --------\n[('1WM281623D3490', 'Aria'), ('1WM391623D5689', 'Aria'), ('1WM999999D0000', 'Aria')]\n[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device 1WM281623D3490 over USB\n[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device 1WM391623D5689 over USB\n[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device 1WM999999D0000 over USB\nDetected server serial 1WM281623D3490\nDetected client serials ['1WM391623D5689', '1WM999999D0000']\n[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device 1WM391623D5689 over USB\n[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device 1WM999999D0000 over USB\n[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device 1WM281623D3490 over USB\n-------- All devices reconnected, please keep all devices plugged in. Performing cleanup --------\nDDS RPC enabled, disabling it\n-------- Successfully performed cleanup. Exiting --------\n")),(0,t.mdx)("h3",{id:"example-3-examine-and-download-recordings"},"Example 3: Examine and download recordings"),(0,t.mdx)("p",null,(0,t.mdx)("inlineCode",{parentName:"p"},"ticsync_file_manager")," enables you to view recordings on your Aria glasses that contain TICSync data as well as download the server and client files at the same time."),(0,t.mdx)("ol",null,(0,t.mdx)("li",{parentName:"ol"},"Plug all Aria glasses into your computer."),(0,t.mdx)("li",{parentName:"ol"},"List VRS recordings grouped by shared session ID. The list is in descending order by date.")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"python -m ticsync_file_manager --list\n")),(0,t.mdx)("p",null,"Depending on how many client devices were used during recordings, there will be 1 or more client devices information listed per server device:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"2024-05-23 21:17:19 Shared Session ID: 7dfe4d16-6f54-47bf-859e-6ee4043234d3 Server Serial: 1WM391623D5689 Server Recording UUID: d8b717ce-ef48-40cd-bcc8-56cd9fe14319\n        Client Serial: 1WM999999D0000 Client Recording UUID: 63334502-6125-498e-8f2e-86567c4cfc0e\n      Client Serial: 1WM222222S0000 Client Recording UUID: c0fae751-4ad5-4e95-a21d-f9060edc1112\n\n2024-05-23 21:14:58 Shared Session ID: 4b5e2587-de1a-42f9-a17c-60bd96a8658c Server Serial: 1WM391623D5689 Server Recording UUID: 1204bcb6-71ea-42b9-bfbb-62e11f5c620a\n        Client Serial: 1WM999999D0000 Client Recording UUID: 012e5c7f-c904-4d6f-822e-0b26aedb7684\n\n...\n")),(0,t.mdx)("p",null,"Using the shared session ID, you can download all the time synchronized recordings for that session, rather than needing to pull individual records. Making a copy of the all the details associated with a shared session ID will be helpful when ",(0,t.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/ARK/sdk/ticsync#tutorial"},"consuming the data")),(0,t.mdx)("h4",{id:"download-the-recordings"},"Download the recordings"),(0,t.mdx)("p",null,"Get the Shared Session ID for the recordings you want to download from ",(0,t.mdx)("inlineCode",{parentName:"p"},"ticsync_file_manager --list"),".\nDownload recordings for that Shared Session ID to a specified output directory:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"python -m ticsync_file_manager --download 7dfe4d16-6f54-47bf-859e-6ee4043234d3 --output_dir ticsync_vrs\n")),(0,t.mdx)("p",null,"In this example, the server and client recordings with the shared session ID ",(0,t.mdx)("inlineCode",{parentName:"p"},"7dfe4d16-6f54-47bf-859e-6ee4043234d3")," will be downloaded to a newly created ",(0,t.mdx)("inlineCode",{parentName:"p"},"ticsync_vrs")," folder."),(0,t.mdx)("h2",{id:"ticsync_recordingpy-code-walkthrough"},(0,t.mdx)("inlineCode",{parentName:"h2"},"ticsync_recording.py")," code walkthrough"),(0,t.mdx)("h3",{id:"1-retrieve-serial-number-and-profile-names-for-server-and-client-devices"},"1. Retrieve serial number and profile names for server and client devices"),(0,t.mdx)("p",null,"A helper function ",(0,t.mdx)("inlineCode",{parentName:"p"},"get_device_serial_and_profile_names")," enables the specified script options to be parsed. If the total number of devices were specified, then it tries to detect the requested number of devices and returns the list. If the device serials and profile names were specified explicitly instead, it simply returns those values."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"[server_serial_and_profile_name, client_serial_and_profile_names] = (\n    get_device_serial_and_profile_names(args, device_client)\n)\n")),(0,t.mdx)("h3",{id:"2-set-up-the-server-device"},"2. Set up the server device"),(0,t.mdx)("p",null,"Use a ",(0,t.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," instance that was configured by a ",(0,t.mdx)("inlineCode",{parentName:"p"},"DeviceClientConfig")," with the server device serial. Connect to the server device."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"server_serial = server_serial_and_profile_name[0]\nserver_profile_name = server_serial_and_profile_name[1]\n# Set up the server device\ndevice_client_config.device_serial = server_serial\ndevice_client.set_client_config(device_client_config)\n# Connect to server device\nserver_device = device_client.connect()\n")),(0,t.mdx)("h3",{id:"3-set-up-hotspot-on-the-server-device"},"3. Set up hotspot on the server device"),(0,t.mdx)("p",null,"Retrieve the ",(0,t.mdx)("inlineCode",{parentName:"p"},"WifiManager")," instance from the server device\u2019s ",(0,t.mdx)("inlineCode",{parentName:"p"},"Device")," instance and set up a hotspot on the server device."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"# Retrieve wifi_manager of the server device\nserver_wifi_manager = server_device.wifi_manager\n# Switch the server device to hotspot mode with a random password\nserver_wifi_manager.set_device_hotspot_status(\n    True, WIFI_HOTSPOT_5GHZ, args.hotspot_country_code\n)\n")),(0,t.mdx)("h3",{id:"4-set-up-the-dds-rpc-on-the-server-device"},"4. Set up the DDS RPC on the server device"),(0,t.mdx)("p",null,"Use the server device\u2019s ",(0,t.mdx)("inlineCode",{parentName:"p"},"Device")," instance to enable RPC over DDS. If already enabled, retrieve a new DDS RPC session ID."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},'if server_device.dds_rpc_enabled_status.state == aria.DdsRpcState.Off:\n    print("DDS RPC is not enabled, enabling it")\n    server_device.set_dds_rpc_enabled(True, aria.StreamingInterface.WifiSoftAp)\nelse:\n    # Retrieve a new DDS RPC session ID\n    session_id = server_device.dds_rpc_new_session_id()\n    print("Retrieved a new DDS RPC session ID", session_id)\n# Retrieve the server device hotspot status. Will be used to connect the client devices to\n# the server device hotspot\nserver_wifi_hotspot_status = server_wifi_manager.device_hotspot_status\n')),(0,t.mdx)("h3",{id:"5-retrieve-the-recording-manager-of-the-server-device"},"5. Retrieve the recording manager of the server device"),(0,t.mdx)("p",null,"Configure server device\u2019s ",(0,t.mdx)("inlineCode",{parentName:"p"},"RecordingManager")," by using a ",(0,t.mdx)("inlineCode",{parentName:"p"},"RecordingConfig")," instance with the specified profile and the time sync mode ",(0,t.mdx)("inlineCode",{parentName:"p"},"TicSyncServer"),"."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"# Retrieve recording_manager of the server device\nserver_recording_manager = server_device.recording_manager\n# Set time sync mode to TicSyncServer using custom recording config\nrecording_config = aria.RecordingConfig()\nrecording_config.profile_name = server_profile_name\nrecording_config.time_sync_mode = aria.TimeSyncMode.TicSyncServer\nserver_recording_manager.recording_config = recording_config\n")),(0,t.mdx)("h3",{id:"6-set-up-the-client-devices"},"6. Set up the client devices"),(0,t.mdx)("p",null,"Reuse the existing ",(0,t.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," instance by resetting the ",(0,t.mdx)("inlineCode",{parentName:"p"},"DeviceClientConfig")," with each client device serial. Connect to the client device."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"client_devices = {}\nclient_recording_managers = {}\n# Set up the client devices\nfor [serial, profile_name] in client_serial_and_profile_names:\n        # Reuse the existing DeviceClient instance by setting a new client config\n        device_client_config.device_serial = serial\n        device_client.set_client_config(device_client_config)\n        # Connect to client device\n        device = device_client.connect()\n")),(0,t.mdx)("h3",{id:"7-connect-client-devices-to-the-server-device-hotspot"},"7. Connect client devices to the server device hotspot**"),(0,t.mdx)("p",null,"Retrieve the ",(0,t.mdx)("inlineCode",{parentName:"p"},"WifiManager")," instance from the client device\u2019s ",(0,t.mdx)("inlineCode",{parentName:"p"},"Device")," instance and connect to the hotspot that was set up on the server device in step 4."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},'wifi_manager = device.wifi_manager\n# Connect client device to server device hotspot\nwifi_status = wifi_manager.wifi_status\n# Check if the client device is already connected to the server device hotspot\nif (\n    wifi_status.enabled is False\n    or wifi_status.network.ssid != server_wifi_hotspot_status.ssid\n):\n    # If not, connect client device to server device hotspot\n    wifi_manager.connect_wifi(\n       server_wifi_hotspot_status.ssid,\n       server_wifi_hotspot_status.passphrase,\n       aria.WifiAuthentication.Wpa,\n       False,  # hidden\n       "",  # username\n       True,  # disable_other_network\n       True,  # skip_internet_check\n    )\n    # Set keep Wi-Fi on as true for the client devices\n    # This keeps the client devices connected to the server Wi-Fi hotspot even when they are disconnected from USB\n    wifi_manager.keep_wifi_on(True)\n')),(0,t.mdx)("h3",{id:"8-start-recording-on-the-server-device"},"8. Start recording on the server device*"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},'# Start recording on the server device\nprint(f"Starting to record the server device {server_serial} using {profile_name}")\nserver_recording_manager.start_recording()\n# Get recording state of the server device\nserver_recording_state = server_recording_manager.recording_state\nprint(f"Recording state of server device {server_serial}: {server_recording_state}")\n')),(0,t.mdx)("h3",{id:"9-start-recording-on-the-client-devices"},"9. Start recording on the client devices"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"# Start recording on the client devices\nfor manager in client_recording_managers.values():\n    manager.start_recording()\n")),(0,t.mdx)("h3",{id:"10-wait-for-devices-to-be-ready-for-data-collection"},"10. Wait for devices to be ready for data collection"),(0,t.mdx)("p",null,"Use ",(0,t.mdx)("inlineCode",{parentName:"p"},"RecordingManager"),"\u2019s TicSync status field to query whether the client devices are ready for data collection."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},'# Wait for for ticsync convergence\ndef _is_stable(recording_manager):\n    status = recording_manager.tic_sync_status\n    return status.synchronization_stability == aria.SynchronizationStability.Stable\n\nprint(\n    "-------- Waiting for devices to be ready for time synchronized data collection, this will take around 45 seconds. --------\\n"\n    "-------- Please keep all devices plugged in. ---------"\n)\nwhile not all(\n    _is_stable(manager) for manager in client_recording_managers.values()\n):\n    time.sleep(5)\n\nprint(\n    "-------- All devices are ready for data collection. You can safely unplug all your glasses from USB ---------"\n)\n')),(0,t.mdx)("p",null,"Once you\u2019ve finished recording, make sure you run ",(0,t.mdx)("inlineCode",{parentName:"p"},"ticsync_cleanup.py")," with all the glasses plugged in to return them to their normal state. Go to  ",(0,t.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/ARK/sdk/ticsync"},"\u201cTime Synchronized Recordings with Multiple Aria Glasses\u201d")," for more information about downloading and consuming the data."))}m.isMDXComponent=!0}}]);